!!! 5
%html
	%head
		%title RubyDay - agenda
		%link{:rel => "stylesheet", :type => "text/css", :href => "stylesheets/agenda.css", :media => "all"}/
		%meta{:charset => "UTF-8"}
	%body
		.container
			.header
				.info
					Domande?
					%a{:href => "mailto:info@rubyday.it"} info@rubyday.it
				%ul.nav
					%li
						%a.button{:href => "/"} home
					%li
						%a.button{:href => "partecipa.html"} partecipa
					%li
						%a.button.current{:href => "agenda.html"} agenda
					%li
						%a.button{:href => "sponsor.html"} sponsors
			.logo
			.motto
				/ %h1 Ruby Day - I talk
				%h2 La lista dei talk ed il programma della giornata.
			.content
				.talks#talks-table
					%table
						%thead
							%tr
								%th
								%th Track #1 - Ruby Mine
								%th Track #2 - Ruby Space
						%tbody
							%tr.break
								%td{:colspan => 3} 9.15 ~ 9.30 - Presentazione RubyDay.it, la storia della comunità Ruby in Italia.
							%tr
								%td 9.30 - 10.00
								%td
									%a{:href => "#talk1-1"} The Aeolus Project
									.tagged.green cloud
								%td
									%a{:href => "#talk2-1"} Ruby on Rails survival guide of an aged Java developer
									.tagged.cyan rails
							%tr
								%td 10.05 - 10.30
								%td
									%a{:href => "#talk1-2"}  Varnish e caching di applicazioni Rails
									.tagged.cyan rails
								%td
									%a{:href => "#talk2-2"} MacRuby
							%tr
								%td 10.35 - 11.00
								%td
									%a{:href => "#talk1-3"} Analisi statica per un linguaggio dinamico
								%td
									%a{:href => "#talk2-3"} Symfony2 and RoR3 friends for an hour
									.tagged.cyan rails
							%tr.break
								%td{:colspan => 3} 11.00 ~ 11.15 - Coffee break
							%tr
								%td 11.15 - 12.00
								%td
									%a{:href => "#talk1-4"} A metaprogramming Spell Book for Ruby and Rails
									.tagged.yellow meta
								%td
									%a{:href => "#talk2-4"} Webby: ASCII alchemy for quick website authoring
							%tr.break
								%td{:colspan => 3} 12.00 ~ 13.30 - Pausa pranzo
							%tr
								%td 13.30 - 14.00
								%td
									%a{:href => "#talk1-5"} Progettare e sviluppare mobile web applications utilizzando Mockup, Sencha Touch e Sinatra
									.tagged.blue mobile
								%td
									%a{:href => "#talk2-5"} Minegems: Hosting privato di gemme
									.tagged.red gem
							%tr
								%td 14.05 - 14.30
								%td
									%a{:href => "#talk1-6"} RSpec best practices
									.tagged.gray tdd
								%td
									%a{:href => "#talk2-6"} To batch or not to batch
							%tr
								%td 14.35 - 15.00
								%td
									%a{:href => "#talk1-7"} REST in peace
								%td
									%a{:href => "#talk2-7"} Solid design for Rails applications
									.tagged.cyan rails
							%tr.break
								%td{:colspan => 3} 15.30 ~ 16.00 - Saluti finali
				.section
					%h1 Track #1
					%p La track #1 sarà nella sala 1 da 300 posti.
				.section
					%h1 Track #2
					%p La track #2 sarà nella sala 2 da 400posti
				.section
					%h1 Coffee Break & Pausa pranzo
					%p yada yada yada
				.talks-details
					.track1
						.talk#talk1-1
							%a.back{:href => "#talks-table"} ↑ table
							%h2 The Aeolus Project - Francesco Vollero
							%p
								Il mondo dei cloud provider è veramente vario e cresce ogni giorno di più il numero di provider che offrono questi servizi.
							%p La scelta è infinitamente varia, per rispondere alla necessità più disparate per l'utente medio. Aeolus Project nasce per offrire un sistema di gestione centralizzato dei diversi provider cloud per grandi società.
							%p Infatti questo progetto si propone come un sistema completo di gestione delle immagini di macchine virtuali, eseguirle nella loro infrastruttura interna (es. VMware vSphere, RHEV) e nello stesso tempo copiare/eseguire/gestire queste immagini virtuali in diversi cloud hosters (es. Amazon EC2, Rackspace, IBM Smart Business Cloud, Microsoft Azure, etc).
							%p Potrebbe apparire un'idiozia al primo sguardo ma è una opzione nel caso in cui, supponiamo, amazon ec2 va giù e possiamo avere la stessa istanza della macchina virtuale (diciamo) su Rackspace e continuare a lavorare da lì.
							%p Aeolus si occupa di tutto ciò che riguarda la conversione/trasferimento/etc automaticamente.Vi starete chiedendo, che ci azzecca questo con il Ruby day? Beh, ci azzecca molto, poiché molte parti di questo progetto sono in Ruby. Tipo? Uno dei componenti più importanti, deltacloud è scritto in Sinatra, parti della gestione delle code è scritto in Ruby e la nostra interfaccia UI è scritta in Rails.
							.links
								%a.twitter{:href => "http://twitter.com/!#/fvollero", :target => "_blank"} @fvollero
								%a.web{:href => "http://www.aeolusproject.org", :target => "_blank"} aeolusproject.org
						.talk#talk1-2
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Varnish e caching di applicazioni Rails - Antonio Carpentieri
							%p
								"Varnish Cache is an open-source web application accelerator. You install it in front of any server that speaks HTTP and you can configure it to cache the contents."
							%p
								Come utilizzare e configurare Varnish davanti a Rails 2.3.x e Rails 3.0.x per far lavorare le tue macchine solo quando è necessario. Vedremo come evitare i più comuni pitfall ed ottenere un caching efficace, a partire dall’ esperienza fatta nell’integrazione di Varnish su una applicazione web in Rails attualmente in produzione.
							%p
								Vedremo anche quali sono i risultati in termini di performance e carico sulle nostre macchine.
							.links
								%a.twitter{:href => "http://twitter.com/!#/acarpe", :target => "_blank"} @acarpe
								%a.web{:href => "http://acarpe.wordpress.com", :target => "_blank"} acarpe.wordpress.com
						.talk#talk1-3
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Analisi statica per un linguaggio dinamico - Marco Borromeo
							%p
								Tutti sappiamo che Ruby è definito un linguaggio "dinamico", e accostarlo alla parola "statico" fa un pò impressione. Ma ci sono casi dove analizzare staticamente il nostro codice può far solo bene: l'analisi statica ci permette di identificare velocemente blocchi di codice ripetuti o molto simili tra loro, verificare la copertura dei tests, eventuali problemi sul design del codice, trovare files che cambiano spesso e misurare la complessità media del codice.
							%p Tenere costantemente monitorati questi dati durante lo sviluppo ci permette di prevenire situazioni dove diventa difficile mantenere il codice, fare bugfixing o introdurre nuove funzionalità.
							%p Durante il talk verranno esaminati i principali tool a disposizione per gestire l'analisi statica di codice Ruby, con esempi di refactoring di codice reale a partire dai dati emersi dalle analisi.
							.links
								%a.twitter{:href => "http://twitter.com/!#/borros", :target => "_blank"} @borros
						.talk#talk1-4
							%a.back{:href => "#talks-table"} ↑ table
							%h2 A Metaprogramming Spell Book - Paolo Perrotta
							%p
								When I started to learn Ruby, I was awed by the code of experienced rubyists. That code was full of amazing magic tricks that I could barely understand. People called those tricks metaprogramming.
							%p With time, I found that metaprogramming sits right at the core of Ruby. To really understand Ruby, I had to understand all those scary tricks! Feeling like a sorcerer's apprentice, I set out to write a Spell Book of metaprogramming techniques. Once I'd finished the Spell Book, metaprogramming didn't seem like black magic anymore. Instead, it just felt like any other set of techniques.
							%p In this talk, I'll show you the content of my Spell Book, so that you don't have to go through the trouble of writing one yourself.
							.links
								%a.twitter{:href => "http://twitter.com/!#/nusco", :target => "_blank"} @nusco
								%a.web{:href => "http://ducktypo.blogspot.com/", :target => "_blank"} ducktypo.blogspot.com/
						.talk#talk1-5
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Progettare e sviluppare mobile web applications utilizzando Mockup, Sencha Touch e Sinatra, Matteo Collina, Daniele Bottillo
							%p
								Mavigex è un’azienda giovane e dinamica che propone soluzioni mobili e interattive all’ avanguardia. La presenza di molteplici piattaforme nel mercato degli smartphone ha portato a scegliere di sviluppare mobile applications con un approccio web-based: HTML5, CSS3 e il framework JavaScript Sencha Touch. Tra i vari linguaggi server-side, verrà mostrato come Ruby e il framework Sinatra siano la scelta che si integra meglio con questo approccio.
							%p Partendo da semplici mockup, durante la presentazione verrà illustrato il processo di sviluppo di queste mobile web applications mostrando la soluzione di un problema specifico, quale la fruizione di recensioni geolocalizzate. Verrà presentato il progetto dell’interazione tra l’ applicazione e il suo backend, poi verranno illustrati brevemente i framework Sencha Touch e Sinatra. L’applicazione sviluppata verrà poi distribuita su un’infrastruttura di cloud computing.
							.links
								%a.twitter{:href => "http://twitter.com/!#/matteocollina", :target => "_blank"} @matteocollina
								,
								%a.twitter{:href => "http://twitter.com/!#/cribcaged7", :target => "_blank"} @cribcaged7
						.talk#talk1-6
							%a.back{:href => "#talks-table"} ↑ table
							%h2 RSpec best practices - Simone Carletti
							%p Abstract
							.links
								%a.twitter{:href => "http://twitter.com/!#/twitter", :target => "_blank"} @twitter
								%a.web{:href => "web", :target => "_blank"} web
						.talk#talk1-7
							%a.back{:href => "#talks-table"} ↑ table
							%h2 REST in peace - Alessandro Nadalin
							%p
								Negli ultimi 15 anni abbiamo re-inventato la ruota in modo da spingere applicazioni web efficienti e scalabili in rete, spesso dimenticando come lo stile architetturale REST ci ha dato, da dieci anni, un ampio insieme di vincoli qualitativi da poter perseguire.
							%p Ancor peggio, le definizioni di RESTsi sono duplicate e hanno dato vita a filoni di pensiero totalmente estranei alla pubblicazione originale di Roy Fielding. In questo intervento guarderemo ciò che è realmente REST e cosa stiamo perdendo ignorando i suoi principi di questo stile architetturale.
							%p Perché non dovremmo avere più cache applicativa? Perché dovremmo essere in grado di costruire servizi fault-tolerant senza LoCs? Cos'é il vincolo sugli hypermedia che tutti chiamano HATEOAS? Come possiamo garantirci grandi performance attraverso la specifica di caching HTTP, amata da REST, e la tecnologia ESI ( Edge Side Inlcudes )?
							%p Lo scopriremo.
							.links
								%a.twitter{:href => "http://twitter.com/!#/_odino_", :target => "_blank"} @_odino_
								%a.web{:href => "http://www.odino.org", :target => "_blank"} odino.org
					.track2
						.talk#talk2-1
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Ruby on Rails survival guide of an aged java developer - Gian Carlo Pace
							%p
								Switching to ruby language and to the rails framework can be puzzling if you come from a deep java background knowledge. "How can I...? How do I...?" are the most common question during the ramp up period of the learning curve and there is a good chance to get lost in the big "cave of the gems".
							%p In this talk I'll try to explain the tips and tricks a java developer should know to avoid some common pitfalls and deliver his first rails project on time.
							.links
								%a.twitter{:href => "http://twitter.com/!#/gicappa", :target => "_blank"} @gicappa
								%a.web{:href => "http://www.gianka.it", :target => "_blank"} gianka.it
						.talk#talk2-2
							%a.back{:href => "#talks-table"} ↑ table
							%h2 MacRuby - Simone D'Amico
							%p
								Introduzione e presentazione di MacRuby, implementazione di ruby 1.9 per Mac Os X. Si vedrà come, e con quali tecnologie, MacRuby s'integra in Cocoa, il framework di riferimento per lo sviluppo su piattaforma Apple. Si vedranno anche i requisiti e le procedure necessarie per pubblicare, ed eventualmente vendere, la propria applicazione ruby sull'App Store.
							.links
								%a.twitter{:href => "http://twitter.com/!#/damicosimone", :target => "_blank"} @damicosimone
								%a.web{:href => "http://www.thmdev.com", :target => "_blank"} thmdev.com
						.talk#talk2-3
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Syfony2 and RoR3: friends for an hour - Alessandro Cinelli, Sandro Paganotti, Alberto Barillà
							%p
								Il talk è focalizzato sulla spiegazione delle princiapli differenze/similitudini fra questi due web framework mainstream. Adotteremo un approccio Top-Down parallelo nel quale gli aspetti di maggior importanza di entrambi i framnework verrannò descritti uno per uno a partire da quelli più infrastrutturali fino ad arrivare a quell prevalentemente inmplementativi. Nella parte conclusiva dello speech ci focalizzeremo nel mostrare le filosofie dietr questi framenwork espondendo le feature più interessanti di entrambi i mondi.
							%p
								Tre speaker parteciperanno a questo speech. ognuno avrà un particolare ruolo: Alessandro, essendo PHP developer, si occuperà di approfondire glia spetti implementativi di Symfony2;
							%p
								Sandro è un haker ruby di vecchia data, che conosce e governa le technicalities del framework Rails; Alberto è il cialtrone (o più comunemente moderatore, nei circoli più mondani) che cercherà di fare da collante fra i due lati della forza.
							.links
								%a.twitter{:href => "http://twitter.com/!#/cirpo", :target => "_blank"} @cirpo
								%a.twitter{:href => "http://twitter.com/!#/sandropaganotti", :target => "_blank"} @sandropaganotti
								%a.twitter{:href => "http://twitter.com/!#/albertobarilla", :target => "_blank"} @albertobarilla
								%a.twitter{:href => "http://twitter.com/!#/webdebresa", :target => "_blank"} @webdebresa
								%a.web{:href => "http://webdebs.org", :target => "_blank"} webdebs.org
						.talk#talk2-4
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Webby: ASCII alchemy for quick website authoring - Andrea Schiavini
							%p
								Webby allows to quickly manage a small website by combining the contents of a page with a layout to produce HTML. It supports different templating engines (ERB, Textile, Markdown, HAML, SASS), rake tasks to build the site and deploy it to a server, templates to quickly build resources like blog posts and much more.
							%p
								Introduzione a webby, installazione e dimostrazione del suo funzionamento per la creazione di un sito personale utilizzando haml e sass. Mostreremo anche come sia possibile usare i siti generati da Webby con Amazon S3.
							%p
								Opzionale: qualche accenno alla web typography con 960 GS.
							.links
								%a.twitter{:href => "http://twitter.com/!#/metalelf0", :target => "_blank"} @metalelf0
								%a.web{:href => "http://metalelf0dev.blogspot.com", :target => "_blank"} metalelf0dev.blogspot.com
						.talk#talk2-5
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Minegems: private gem hosting - Luca Guidi
							%p
								L'ecosistema Ruby si è notevolmente evoluto: RVM, Bundler ed un nuovo RubyGems.org hanno reso più agevole lavorare con le gemme.
							%p
								Sfortunatamente siamo ancora lontani dalla soluzione ideale: i deploy sono ancora troppo lenti, le gemme private sono distribuite tramite sistemi non standardizzati, i plugin Rails non possono essere facilmente distribuiti. In questo talk verrà spiegato come è stato sviluppato un servizio di hosting privato di gemme.
							.links
								%a.twitter{:href => "http://twitter.com/!#/jodosha", :target => "_blank"} @jodosha
								%a.web{:href => "http://about.me/jodosha", :target => "_blank"} about.me/jodosha
						.talk#talk2-6
							%a.back{:href => "#talks-table"} ↑ table
							%h2 To batch or not to batch - Luca Mearelli
							%p
								Sviluppare un'applicazione web sembra essere diventato molto semplice da quando abbiamo framework come rails o sinatra, ma la realtà è un po' più complessa di quello che sembra :)
							%p
								Qualunque applicazione dovrà fare una o più di queste operazioni, o operazioni simili:
							%ul
								%li mandare email
								%li generare documenti o esportazioni dei dati
								%li ridimensionare o trasformare foto
								%li interrogare web service remoti
							%p
								Tutte queste sono troppo lente e pesanti per essere eseguite nel normale ciclo di richiesta/risposta.
							%p
								Non potendo eseguire certe attività in poche frazioni di secondo, l'unica possibilità che abbiamo è farle al di fuori dell'applicazione, utilizzando un meccanismo di esecuzione asincrono.
							%p
								Quando l'applicazione si trova a dover eseguire un'attività "lenta", ne potrà lanciare l'esecuzione e potrà proseguire a rispondere all'utente senza doverne aspettare la conclusione. Nei casi in cui sia necessario utilizzare il risultato dell'operazione asincrona, si farà in modo che questi possano essere recuperati con facilità.
							%p
								Questo permette all'applicazione di rimanere rapida e reattiva alle richieste degli utenti e rende più facile farla scalare.
							%p
								Oltre alle operazioni "lente" richieste dagli utente, è spesso necessario eseguire attività di manutenzione programmata (ad esempio: la pulizia delle sessioni), vedremo dunque come alcuni strumenti permettono di programmare nel tempo le attività asincrone, indipendentemente dalle richieste degli utenti.
							%p
								Esistono varie possibilità e librerie che permettono di implementare un sistema del genere e durante il talk utilizzando vari esempi, parleremo soprattutto di code, workers, & co:
							%ul
								%li Resque
								%li Delayed_job
							%p
								Ma anche di crontab:
							%ul
								%li Craken
								%li Whenever
							%p
								Accennando infine ad altri approcci (attuali & storici)
							%ul
								%li Beanstalkd and Stalker
								%li BackgroundRb
								%li SQS
								%li Nanite
							.links
								%a.twitter{:href => "http://twitter.com/!#/lmea", :target => "_blank"} @lmea
								%a.web{:href => "http://spazidigitali.com", :target => "_blank"} spazidigitali.com
						.talk#talk2-7
							%a.back{:href => "#talks-table"} ↑ table
							%h2 Solid design for Rails applications - Matteo Vaccari
							%p
								Le applicazioni Rails sono progettate secondo uno schema preciso: model, view, controller. Quando l'applicazione è giovane, i modelli le view e i controller sono di una chiarezza cristallina. Ma con l'andare del tempo, si aggiungono gli IF e le modifiche e l'originale chiarezza viene offuscata. Che fare quando la view, il modello o il controller diventano foreste impenetrabili?
							%p
								In questa presentazione vorrei mostrare alcune tecniche per riportare la semplicità in un'applicazione Rails, ritornando ad alcuni ben noti principi di programmazione a oggetti.
							.links
								%a.twitter{:href => "http://twitter.com/!#/xpmatteo", :target => "_blank"} @xpmatteo
								%a.web{:href => "http://matteo.vaccari.name/blog/", :target => "_blank"} matteo.vaccari.name/blog/
		.footer
		%script{:type => "text/javascript", :src => "https://ajax.googleapis.com/ajax/libs/jquery/1.6.0/jquery.min.js"}
		:javascript
			$(document).ready(function() {
				$('table a').click(function() {
					$('.talk.selected').removeClass('selected');
					$('html, body').animate({
						scrollTop: $($(this).attr('href')).addClass('selected').offset().top
					}, 500);
					return false;
				});
				$('.talk > a.back').click(function() {
					$('.talk.selected').removeClass('selected');
					$('html, body').animate({
						scrollTop: $('#talks-table').offset().top
					}, 500);
					return false;
				});
			})